// Test.cpp : Defines the entry point for the console application.
//

#include "stdafx.h"


CONST BYTE ChalKey[] = {
	0x00, 0x00, 0x00, 0x10, 0x00, 0x01, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x04, 0xD0, 0x55, 0x50, 0x79, 0x19, 0x95, 0x27,
	0x78, 0x89, 0x97, 0x08, 0xDE, 0x24, 0xD1, 0xED, 0xB1, 0xEA, 0xE5, 0x48,
	0xAC, 0x1A, 0xC3, 0xC8, 0x29, 0x45, 0xB0, 0x16, 0x9B, 0xEF, 0x78, 0x8F,
	0xEF, 0x26, 0x9D, 0x54, 0x59, 0x95, 0x2D, 0x25, 0xA5, 0xAC, 0xA3, 0xA6,
	0x94, 0x45, 0xE5, 0x42, 0x2E, 0x39, 0x88, 0x0C, 0x3C, 0xAE, 0xEB, 0xFD,
	0x53, 0x3A, 0xE9, 0x70, 0x43, 0xEA, 0xD1, 0xD1, 0x78, 0xCE, 0xED, 0x1C,
	0xE5, 0xFD, 0x0F, 0x80, 0x94, 0x6F, 0x4F, 0xFF, 0xAD, 0x45, 0x88, 0xCF,
	0x22, 0x4C, 0x56, 0xDE, 0x03, 0xE2, 0x46, 0x2F, 0x19, 0xB8, 0x2C, 0xD0,
	0xD7, 0xE9, 0x64, 0xB2, 0x68, 0x0C, 0x40, 0xF5, 0x4F, 0xDA, 0x80, 0x8F,
	0x71, 0xA9, 0x64, 0xA4, 0x15, 0x53, 0x6E, 0x2B, 0x49, 0x44, 0x55, 0xCB,
	0x05, 0x17, 0x3F, 0x66, 0xE1, 0x32, 0x2F, 0x1D, 0xE9, 0x2A, 0xD6, 0x4B
};


VOID ReverseData(PBYTE pbData, DWORD cbData) {
	DWORD dwMidpoint = cbData >> 1;
	DWORD dwReverseCounter = 0;
	PBYTE pbPtr = pbData;

	if (dwMidpoint) {
		while (dwReverseCounter < dwMidpoint) {
			DWORD i = (cbData - dwReverseCounter) - 1 & 0xFFFFFFFF;

			BYTE b1 = *pbPtr;
			BYTE b2 = pbData[i];
			*pbPtr = b2;
			pbData[i] = b1;

			dwReverseCounter++;
			pbPtr++;
		}
	}
}


VOID HvSetupShaSaltedHash(PBYTE Buffer1, DWORD Size1, PBYTE Buffer2, DWORD Size2) {
	DWORD i = 0;
	for (DWORD s = 0; s < Size2; s += 0x14)
	{
		DWORD subsize = (s + 0x14 > Size2) ? Size2 - s : 0x14;
		BYTE tmp[0x14];
		BYTE tmpint[] = { 0, 0, 0, i };
		XeShaContext sha;
		XeCryptShaInit(&sha);
		XeCryptShaUpdate(&sha, Buffer1, Size1);
		XeCryptShaUpdate(&sha, tmpint, 4);
		XeCryptShaFinal(&sha, tmp, 0x14);
		for (DWORD l = 0; l < subsize; l++)
			Buffer2[s + l] ^= tmp[l];
		i++;
	}
}

PBYTE HvSetupMemEncryptionKey(PBYTE Key, PBYTE clientSession) {
	BYTE HvData[0x14]		= { 0xDA, 0x39, 0xA3, 0xEE, 0x5E, 0x6B, 0x4B, 0x0D, 0x32, 0x55, 0xBF, 0xEF, 0x95, 0x60, 0x18, 0x90, 0xAF, 0xD8, 0x07, 0x09 };
	BYTE signature[0x80]	= { 0x00 };

	signature[0] = 0;
	memcpy((signature + 1),		clientSession, 0x14);
	memcpy((signature + 0x15),	HvData, 0x14);
	memset((signature + 0x29),	0,		0x26);

	signature[0x4F] = 1;
	memcpy((signature + 0x50), Key, 0x30);
	HvSetupShaSaltedHash(clientSession, 0x14, (signature + 0x15), 0x6B);
	HvSetupShaSaltedHash((signature + 0x15), 0x6B, clientSession, 0x14);

	return signature;
}

void RSAEncryptSignature(PBYTE Input, PBYTE buffer) {
	byte signature[0x80];
	memcpy(signature, Input, 0x80);

	ReverseData(signature, 0x80);
	XeCryptBnQw_SwapDwQwLeBe((const u64*)signature, (u64*)signature, 0x10);
	if (XeCryptBnQwNeRsaPubCrypt((const u64*)signature, (u64*)signature, (XeRsaKey*)ChalKey)) {
		XeCryptBnQw_SwapDwQwLeBe((const u64*)signature, (u64*)signature, 0x10);
		memcpy(buffer, signature, 0x80);
	}else{
		printf("XeCryptBnQwNeRsaPubCrypt FAILED!\n");
		memset(buffer, 0x0, 0x80);
	}
}

PBYTE ComputeRSAOutput(PBYTE Key, PBYTE clientSession){
	BYTE RsaFinal[0x80] = { 0x00 };
	memset(RsaFinal, 0x00, 0x80); 

	BYTE  shaSalt[0x14]	= { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, clientSession[04], clientSession[02] };
	PBYTE RsaData = HvSetupMemEncryptionKey(Key, shaSalt);
	RSAEncryptSignature(RsaData, RsaFinal);

	return RsaFinal;
}

PBYTE ECC_Chal(PBYTE Hypervisor, PBYTE HV_ENC, PBYTE SoC, PBYTE checksum){
	BYTE OutHash[0x14] = { 0x00 };

	XeShaContext sha;
	XeCryptShaInit(&sha);
	XeCryptShaUpdate(&sha, checksum, 0x02);
	XeCryptShaUpdate(&sha, Hypervisor + 0x34, 	0xC);
	XeCryptShaUpdate(&sha, Hypervisor + 0x40, 	0x30);
	XeCryptShaUpdate(&sha, Hypervisor + 0xF0, 	0x4);
	XeCryptShaUpdate(&sha, Hypervisor + 0xF8, 	0x8);
	XeCryptShaUpdate(&sha, SoC 		+ 0x2, 		0x3FE);
	XeCryptShaUpdate(&sha, HV_ENC 	+ 0x100C0, 	0x40);
	XeCryptShaUpdate(&sha, HV_ENC 	+ 0x10350, 	0x30);
	XeCryptShaUpdate(&sha, SoC 		+ 0x40E, 	0x17C);
	XeCryptShaUpdate(&sha, HV_ENC 	+ 0x16280,	0x40);
	XeCryptShaUpdate(&sha, HV_ENC 	+ 0x16EA0, 	0x60);
	XeCryptShaUpdate(&sha, SoC 		+ 0x5BC, 	0x244);
	XeCryptShaUpdate(&sha, SoC 		+ 0x800, 	0x400);
	XeCryptShaUpdate(&sha, SoC 		+ 0xC00, 	0x400);
	XeCryptShaFinal(&sha,  OutHash,				0x14);

	return OutHash;
}

PBYTE Chal(PBYTE Hypervisor, PBYTE checksum){
	BYTE OutHash[0x14] = { 0x00 };

	XeShaContext sha;
	XeCryptShaInit(&sha);
	XeCryptShaUpdate(&sha, checksum,			 0x10);
	XeCryptShaUpdate(&sha, Hypervisor + 0x34,	 0x40);
	XeCryptShaUpdate(&sha, Hypervisor + 0x78,	 0xFF88);
	XeCryptShaUpdate(&sha, Hypervisor + 0x100C0, 0x40);
	XeCryptShaUpdate(&sha, Hypervisor + 0x10350, 0x5F70);
	XeCryptShaUpdate(&sha, Hypervisor + 0x16EA0, 0x9160);
	XeCryptShaUpdate(&sha, Hypervisor + 0x20000, 0xFFFF);
	XeCryptShaUpdate(&sha, Hypervisor + 0x30000, 0xFFFF);
	XeCryptShaFinal(&sha,  OutHash,				 0x14);

	return OutHash;
}

int _tmain(int argc, _TCHAR* argv[])
{
	BYTE pbData[0x04] = { 0x11, 0x22, 0x33, 0x44 };

	ReverseData(pbData, 0x04);

    printf("pbData: 0x%X %X %X %X!\n", pbData[0], pbData[1], pbData[2], pbData[3]);

	getchar();
	return 0;
}

