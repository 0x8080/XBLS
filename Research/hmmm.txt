/*
 
BYTE ShellCode[] = {
    0x7D, 0x88, 0x02, 0xA6, 0xFB, 0xA1, 0xFF, 0xE0, 0xFB, 0xC1, 0xFF, 0xE8,
    0xFB, 0xE1, 0xFF, 0xF0, 0xF9, 0x81, 0xFF, 0xF8, 0x94, 0x21, 0xFF, 0x00,
    0x7C, 0x7D, 0x1B, 0x78, 0x7C, 0x9E, 0x23, 0x78, 0x7C, 0xBF, 0x2B, 0x78,
    0x7F, 0xA3, 0xEB, 0x78, 0x48, 0x00, 0x00, 0x45, 0x7F, 0xC3, 0xF3, 0x78,
    0x48, 0x00, 0x00, 0x3D, 0x7F, 0xE3, 0xFB, 0x78, 0x48, 0x00, 0x00, 0x35,
    0x7F, 0xA3, 0xEB, 0x78, 0x7F, 0xC4, 0xF3, 0x78, 0x7F, 0xE5, 0xFB, 0x78,
    0x38, 0x21, 0x01, 0x00, 0xEB, 0xA1, 0xFF, 0xE0, 0xEB, 0xC1, 0xFF, 0xE8,
    0xEB, 0xE1, 0xFF, 0xF0, 0xE9, 0x81, 0xFF, 0xF8, 0x7D, 0x88, 0x03, 0xA6,
    0x4E, 0x80, 0x00, 0x20, 0x60, 0x00, 0x00, 0x00, 0x4B, 0xFF, 0xFF, 0xFC,
    0x7D, 0x88, 0x02, 0xA6, 0xFB, 0xA1, 0xFF, 0xE0, 0xFB, 0xC1, 0xFF, 0xE8,
    0xFB, 0xE1, 0xFF, 0xF0, 0xF9, 0x81, 0xFF, 0xF8, 0x94, 0x21, 0xFF, 0x00,
    0x7C, 0x7F, 0x1B, 0x78, 0x3B, 0xC0, 0x00, 0x08, 0x7F, 0xC9, 0x03, 0xA6,
    0x7F, 0xE3, 0xFB, 0x78, 0x78, 0x63, 0x06, 0x20, 0x3C, 0x80, 0x80, 0x00,
    0x60, 0x84, 0x02, 0x00, 0x78, 0x84, 0x07, 0xC6, 0x64, 0x84, 0xEA, 0x00,
    0x80, 0xA4, 0x10, 0x18, 0x54, 0xA5, 0x01, 0x8D, 0x41, 0x82, 0xFF, 0xF8,
    0x54, 0x63, 0xC0, 0x0E, 0x90, 0x64, 0x10, 0x14, 0x7B, 0xFF, 0xC2, 0x02,
    0x42, 0x00, 0xFF, 0xD0, 0x38, 0x21, 0x01, 0x00, 0xEB, 0xA1, 0xFF, 0xE0,
    0xEB, 0xC1, 0xFF, 0xE8, 0xEB, 0xE1, 0xFF, 0xF0, 0xE9, 0x81, 0xFF, 0xF8,
    0x7D, 0x88, 0x03, 0xA6, 0x4E, 0x80, 0x00, 0x20
};
 
// detour and setup payload
*(PDWORD)(pbBuffer + 0x198) = 0xEB9E00FC; // ld r28, 0xFC(r30) - XeCryptShaInit
*(PDWORD)(pbBuffer + 0x19C) = 0xEBBE00FC; // ld r29, 0xFC(r30) - XeCryptShaUpdate
*(PDWORD)(pbBuffer + 0x1A0) = 0xEBDE00FC; // ld r30, 0xFC(r30) - XeCryptShaFinal
HvPokeQWORD(0x20001613C, 0x8000010600032500); // add address into jump table
HvPokeBytes(0x8000010600032500, ShellCode, sizeof(ShellCode));
 
// patch hypervisor
HvPokeDWORD(0x6124, 0x60000000); // XeCryptHmacSha challenge
HvPokeDWORD(0x6148, 0x60000000); // XeCryptRc4Ecb challenge
HvPokeDWORD(0x6164, 0x60000000); // XeCryptRotSumSha challenge
HvPokeDWORD(0x617C, 0x38600001); // XeCryptBnQwBeSigVerify challenge
 
// run it
PBYTE pbHypervisorSalt = (PBYTE)MmGetPhysicalAddress(Argument1);
XeKeysExecute(pbBuffer, cbBuffer, pbHypervisorSalt, Argument2, Argument3, Argument4);
 
*/
 

 
.globl _start
_start:
 
hook:
    # prologue
    mflr %r12
    std %r29, -0x20(%r1)
    std %r30, -0x18(%r1)
    std %r31, -0x10(%r1)
    std %r12, -0x08(%r1)
    stwu %r1, -0x100(%r1)
 
    # all these are saved
    mr %r29, %r3
    mr %r30, %r4
    mr %r31, %r5
   
    # print sha state
    mr %r3, %r29
    bl printR3
   
    # print address
    mr %r3, %r30
    bl printR3
   
    # print length
    mr %r3, %r31
    bl printR3
   
    # restore
    mr %r3, %r29
    mr %r4, %r30
    mr %r5, %r31
   
    # epilogue
    addi %r1, %r1, 0x100
    ld %r29, -0x20(%r1)
    ld %r30, -0x18(%r1)
    ld %r31, -0x10(%r1)
    ld %r12, -0x08(%r1)
    mtlr %r12
    blr
   
freeze:
    nop
    b freeze
   
printR3:
    # prologue
    mflr %r12
    std %r29, -0x20(%r1)
    std %r30, -0x18(%r1)
    std %r31, -0x10(%r1)
    std %r12, -0x08(%r1)
    stwu %r1, -0x100(%r1)
   
    # loopy and printy
    mr %r31, %r3
    li %r30, 8
    mtctr %r30
loop:
    mr %r3, %r31
    clrldi %r3, %r3, 56 # clear higher bits
 
putChar:
    lis %r4, 0x8000
    ori %r4, %r4, 0x200
    rldicr %r4, %r4, 32,31
    oris %r4, %r4, 0xEA00
waitloop:
    lwz %r5, 0x1018(%r4)
    rlwinm. %r5, %r5, 0,6,6
    beq waitloop
    slwi %r3, %r3, 24
    stw %r3, 0x1014(%r4)
   
    srdi %r31, %r31, 8
    bdnz loop
   
    # epilogue
    addi %r1, %r1, 0x100
    ld %r29, -0x20(%r1)
    ld %r30, -0x18(%r1)
    ld %r31, -0x10(%r1)
    ld %r12, -0x08(%r1)
    mtlr %r12
    blr